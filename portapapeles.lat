/* https://github.com/jarriztg/Plugins-LatGram */

global funcion subproceso_papelera()
   array = obtenerLeer(msg.de.id, msg.texto, 22)
   si array
      si cadena.match(cadena.minusculas(msg.texto), "^(s|si)$")
         redis.borrar(com, "extras:"..msg.de.id..":portapapeles")
         enviarMensaje(msg.chat.id, "*Papelera vaciada*.", md)
         detenerLeer(msg.de.id, 22)
      sino
         enviarMensaje(msg.chat.id, "*Proceso abortado*.", md)
         detenerLeer(msg.de.id, 22)
      fin
      retornar verdadero
   fin
   retornar falso
fin

funcion subproceso()
   si subproceso_papelera()
      retornar "Opción de portapapeles de "..msg.de.nombre..": "..msg.texto
   fin
fin

funcion mensajes()
   hash = "extras:"..msg.de.id..":portapapeles"
    si blocks[1] == "copiar"
        si respuesta.id
            si respuesta.sticker.id
                redis.asignar(com, hash, '{"tipo": "sticker", "contenido":"'..respuesta.sticker.id..'"}')
                enviarMensaje(msg.chat.id, "*Sticker copiado en el portapapeles*.", md)
            osi respuesta.voz.id
                redis.asignar(com, hash, '{"tipo": "voz", "contenido":"'..respuesta.voz.id..'", "accion": "grabar_audio"}')
                enviarMensaje(msg.chat.id, "*Audio copiado en el portapapeles*.", md)
            osi respuesta.foto[0].id
                redis.asignar(com, hash, '{"tipo": "foto", "contenido":"'..respuesta.foto[0].id..'", "accion": "subir_foto"}')
                enviarMensaje(msg.chat.id, "*Foto copiada en el portapapeles*.", md)
            osi respuesta.archivo.id
                redis.asignar(com, hash, '{"tipo": "archivo", "contenido":"'..respuesta.archivo.id..'", "accion": "subir_archivo"}')
                enviarMensaje(msg.chat.id, "*Archivo copiado en el portapapeles*.", md)
            osi respuesta.texto
                si cadena.longitud(respuesta.texto) > 200
                    enviarMensaje(msg.chat.id, "El texto a copiar *es demasiado largo*, intenta con un texto menor a 200\nPuedes responder con el comando /longitud a un texto para obtener su longitud.", md)
                    retornar 0
                fin
                redis.asignar(com, hash, '{"tipo": "texto", "contenido":"'..unescape(respuesta.texto)..'", "accion": "escribiendo"}')
                enviarMensaje(msg.chat.id, "*Texto copiado en el portapapeles*.", md)
            fin
        sino
            enviarMensaje(msg.chat.id, "*Debes responder* a un _texto_, _archivo_, _sticker_, _nota de voz_ o a una _foto_ para guardarla a tu portapapeles.", md)
        fin
    osi blocks[1] == "pegar"
        portapapeles = redis.obtener(com, hash)
        si portapapeles
            c = json.decodificar(portapapeles)
        //    si c.accion enviarAccion(msg.chat.id, acadena(c.accion)) fin
            si c.tipo == "sticker"
                enviarSticker(msg.chat.id, c.contenido, msg.id)
            osi c.tipo == "foto"
                enviarFoto(msg.chat.id, c.contenido, "Foto enviada desde el portapapeles")
            osi c.tipo == "voz"
                enviarVoz(msg.chat.id, c.contenido, "Nota de voz enviada desde el portapapeles")
            osi c.tipo == "archivo"
                enviarArchivo(msg.chat.id, c.contenido, "Archivo enviado desde el portapapeles")
            osi c.tipo == "texto"
                enviarMensaje(msg.chat.id, "Texto de portapapeles:\n"..c.contenido)
            fin
        sino
            enviarMensaje(msg.chat.id, "*No hay nada pegado en tu portapapeles*.", md)
        fin
    osi blocks[1] == "vaciar"
        portapapeles = redis.obtener(com, hash)
        si portapapeles
            c = json.decodificar(portapapeles)
            enviarMensaje(msg.chat.id, "*¿Está seguro de vacíar su papelera?* tiene un "..c.tipo.." en su portapapeles \[S/n].", md)
            iniciarLeer(msg.de.id, msg.texto, 22, 10)
            retorno 1
        fin
        enviarMensaje(msg.chat.id, "*No tienes nada en el portapapeles*.", md)
    osi blocks[1] == "longitud"
        si respuesta.texto
            enviarMensaje(msg.chat.id, "Este texto mide *"..cadena.longitud(respuesta.texto).."* \[texto respondido]", md)
            retornar 1
        sino
            si matches[2]
                enviarMensaje(msg.chat.id, "Este texto mide *"..cadena.longitud(matches[2]).."*", md)
            fin
        fin
    fin
fin



retornar {
    "comandos": [
        "^/(pegar)$",
        "^/(copiar)$",
        "^/(vaciar)$",
        "^/(longitud)$",
        "^/(longitud) (.*)$"
    ],
    "accion": mensajes,
    "subproceso": subproceso
}
